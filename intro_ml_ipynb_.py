# -*- coding: utf-8 -*-
"""intro_ML.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sGHozDOaulPPIZDQYE3LKIVrE6ezNMFS
"""

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
import matplotlib.pyplot as plt

"""# Read data"""

!git clone https://github.com/andrsolo21/hse_ML_intro

!ls

columns = ["date", "time", "open","max","min", "close", "volume"]
df = pd.read_csv("hse_ML_intro/data/EURUSD_30_2020-10-01_2020-10-31.csv", names = columns)

df["average"] = (df["max"] + df["min"]) / 2
df["datetime"] = df["date"] + "@" +  df["time"]
df["datetime"] = df["datetime"].apply(lambda x: datetime.strptime(x,"%Y.%m.%d@%H:%M"))

print(df.info())
df.head()

"""# Calc mov average"""

delta = df.iloc[4]["datetime"] - df.iloc[3]["datetime"]
count = 286

prdf = df[["datetime"]].copy()
prdf["datetime"] = prdf["datetime"] + 286 * delta
prdf["movaverage"] = 0
for i in range(df.shape[0]):
    prdf["movaverage"].iloc[i]= df.iloc[i:143 + i]["average"].mean()
print(prdf[prdf["movaverage"] == 0].shape)
print(delta)
prdf.head()

"""# Forecast"""

from fbprophet import Prophet

m = Prophet()

data = pd.DataFrame()
data['ds'] = df['datetime']
data['y'] = df['average']
m.fit(data)

future = pd.DataFrame()
future['ds'] = prdf["datetime"]
forecast = m.predict(future)

prdf2 = prdf.merge(forecast[["ds","yhat"]], left_on = "datetime",right_on = "ds", how = "left")

"""# Print graphs"""

plt.figure(figsize=(16,8))
realx = np.arange(df.shape[0])
plt.plot(realx,df["average"], label = "real")

movx = np.arange(prdf2.shape[0]) + 286
plt.plot(movx,prdf2["movaverage"], label = "movingAverage")

plt.plot(movx,prdf2["yhat"], label = "forecast")

plt.legend()
plt.show()

"""# quality"""

res = df.merge(prdf2, on = "datetime", how = "outer", indicator = True)

resB = res[res["_merge"] == "both"]

resMov = np.mean(np.abs(resB["average"] - resB["movaverage"])) * (timedelta(hours = 24) / delta) / resB["average"].iloc[0]
resFor = np.mean(np.abs(resB["average"] - resB["yhat"])) * (timedelta(hours = 24) / delta) / resB["average"].iloc[0]
print("moving average result: ", resMov)
print("forecast result: ", resFor)





